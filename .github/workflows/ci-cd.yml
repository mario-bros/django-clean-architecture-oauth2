name: Django Clean Architecture CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: django-clean-arch

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Django system check
      run: |
        python manage.py check --deploy
        
    - name: Run migrations check
      run: |
        python manage.py makemigrations --check --dry-run
        
    - name: Run Clean Architecture tests
      run: |
        python -m pytest src/tests/ -v --tb=short
        
    - name: Run Django tests
      run: |
        python manage.py test myapp
        
    - name: Test project validation
      run: |
        python project_validator.py

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        safety check -r requirements.txt
        
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:dev .
        
    - name: Build production image
      run: |
        docker build -f Dockerfile.prod -t ${{ env.DOCKER_IMAGE }}:prod .
        
    - name: Test Docker containers
      run: |
        # Test development container
        docker run --rm -d --name test-dev -p 8001:8000 ${{ env.DOCKER_IMAGE }}:dev
        sleep 10
        docker exec test-dev python manage.py check
        docker stop test-dev
        
        # Test production container
        docker run --rm -d --name test-prod -p 8002:8000 ${{ env.DOCKER_IMAGE }}:prod
        sleep 10
        docker exec test-prod python manage.py check --deploy
        docker stop test-prod
        
    - name: Save Docker images
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:dev | gzip > django-clean-arch-dev.tar.gz
        docker save ${{ env.DOCKER_IMAGE }}:prod | gzip > django-clean-arch-prod.tar.gz
        
    - name: Upload Docker artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          django-clean-arch-dev.tar.gz
          django-clean-arch-prod.tar.gz

  skaffold-dev:
    name: Skaffold Development Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set up Skaffold
      run: |
        curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
        sudo install skaffold /usr/local/bin/
        
    - name: Download Docker images
      uses: actions/download-artifact@v3
      with:
        name: docker-images
        
    - name: Load Docker images
      run: |
        docker load < django-clean-arch-dev.tar.gz
        
    - name: Validate Skaffold configuration
      run: |
        skaffold config list
        skaffold schema get
        
    - name: Run Skaffold validation
      run: |
        skaffold build --profile=development --dry-run
        skaffold run --profile=development --dry-run
        
    # Note: Actual deployment would require cluster access
    # - name: Deploy to development cluster
    #   run: |
    #     skaffold run --profile=development

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Generate OpenAPI schema
      run: |
        python manage.py spectacular --color --validate --file schema.yaml
        
    - name: Validate API endpoints
      run: |
        python test_endpoints.py || echo "Server not running - validation skipped"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: |
          schema.yaml
          README.md
          ARCHITECTURE_GUIDE.md
          CLEAN_ARCHITECTURE_SUMMARY.md

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, build, documentation]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release tag
      run: |
        echo "RELEASE_TAG=v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Django Clean Architecture Release ${{ env.RELEASE_TAG }}
        body: |
          ## Django Clean Architecture OAuth2 API
          
          ### Features
          - ✅ Clean Architecture implementation
          - ✅ OAuth2 authentication with Django OAuth Toolkit
          - ✅ Professional API documentation (Swagger/ReDoc)  
          - ✅ Comprehensive testing strategy
          - ✅ Docker containerization
          - ✅ Kubernetes manifests
          - ✅ Skaffold configuration
          
          ### Deployment
          - Development: `skaffold dev --profile=development`
          - Production: `skaffold run --profile=production`
          
          ### Documentation
          - API Docs: `/api/docs/`
          - Architecture Guide: `ARCHITECTURE_GUIDE.md`
          - Setup Guide: `SETUP_GUIDE.md`
        draft: false
        prerelease: false
